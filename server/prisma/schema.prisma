// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator zod {
 provider       = "zod-prisma-types"
 output = "../src/schemas"
 addInputTypeValidation = false
 modelCase         = "PascalCase"
 outputType        = "zod"
}

// generator zod {
//   provider                 = "zod-prisma"
//   output                   = "./zod" // (default) the directory where generated zod schemas will be saved

//   relationModel            = true // (default) Create and export both plain and related models.
//   // relationModel         = "default" // Do not export model without relations.
//   // relationModel         = false // Do not generate related model

//   modelCase                = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
//   // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

//   modelSuffix              = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

//   // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
//   useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

//   imports                  = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

//   // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
//   prismaJsonNullability    = true // (default) uses prisma's scheme for JSON field nullability
//   // prismaJsonNullability = false // allows null assignment to optional JSON fields
// }

model Users {
  id Int @id @default(autoincrement())
  name String /// @zod.string.min(1)
  email String /// @zod.string.min(1)
  password String /// @zod.string.min(1)
  status String /// @zod.string.min(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email])
}

model Session {
  id            String   @id @default(uuid())  // Session ID
  userId        String
  refreshToken  String?  // Store refresh token for JWT-based auth
  expiresAt     DateTime // Expiration time for session
  createdAt     DateTime @default(now())
}
